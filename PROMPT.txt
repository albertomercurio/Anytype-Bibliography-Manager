I have a Anytype space where I'm trying to manage all my research, including projects, ideas, and especially bibliography. You can directly see how it is structured now.

I want now some automation when creating a new reference. For example, I discover an article or a book, I then take the DOI from which a script should automatically generate a Article (or Book) Object in Anytype, filling all the required properties of the object.

Among all the properties, there is also the bibtext string code. It should be extracted from the most suitable API (CrossRef or better alternatives?). However, I would like to apply to it a few changes:

- The title field should be embedded in two curly brackets "{{ title }}", in order to support capital letters. Tell me if this issue is not anymore present for newer versions of latex.
- The cite key should be LastYYYTitle, where Last is the last name of the first author, YYYY is the year and Title is the first word of the title. Pay attention to not include accents or special characters to it, as latex may not support them. Again, tell me if newer versions of latex don't require it anymore.
- It should be properly formatted, avoiding a long single-line string.

The framework should detect possibly duplicates of authors, journals and articles, paying attention on abbreviations. For example, it could be possible that one author is saved as "Salvatore Savasta", but when I extract the authors from the new DOI, I get "S. Savasta". The two authors could be linked to the same actual person, so the tool should ask wether to abort, use the existing author, or create a new one. Same for the journals. This check should be done before making changes to the Anytype database.

Actually, it is easy to check articles duplicates, as each article has a DOI, so one could compare the doi (lower case normalised to avoid differences in capital letters). One could also fill the ORCID property for the authors, in order to avoid this problem. In this way, even if the extracted name is abbreviated, the extracted orcid can remove any ambiguities. The ORCID could not be always available, in that case, the algorithm should first check the last name (it is a property of the object), and from that ask what to do in case of "possible" duplicates.

The duplicates of the Journals should also be careful. For example Physical Review X is very similar to Physical Review Letters, but the two are very different journals. Also, Phys. Rev. Lett. is actually the same journal as Physical Review Letters, but I can understand that it is difficult to automaticall detect such a case.

The tool should support as input the DOI (mandatory) and a PDF file. The PDF file should be attached to the corresponding property of the object, if there are the APIs for that.

There should be an option to wether integrate some help from AI. For example, the tool could ask help to AI (like calling claude code from the shell or something like that) in order to fix possible duplicates of authors, or generate a summary of the paper, by looking at the PDF.

I would like some clean interface, and very simple to use. I don't know if the best way is to create a server for it, a bash script, a python script, a typescript project, or something else. Before you proceed on creating such framework, please let's discuss together. I would prefer something that would potentially be platform agnostic. Imaging like to have also support on mobile apps. So I don't know if typescript would be better for that. Up to you.

It should be something almost ready to use. The user should first setup everything like:
- Set the Anytype API. See for example this page: https://developers.anytype.io/docs/guides/get-started/authentication
- Install possible environment packages, if using python or nodejs or similars. This should be confined, not polluting the general environment. If using python, is uv the best choice to manage the environment? I know there is also poetry, but I don't know which is better.

I would recommend to deeply study the Anytype API documentation: https://developers.anytype.io/docs/reference/2025-05-20/anytype-api
